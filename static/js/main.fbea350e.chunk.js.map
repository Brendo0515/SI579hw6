{"version":3,"sources":["WordList.js","HeaderList.js","App.js","index.js"],"names":["WordList","props","text","onClick","onDone","HeaderList","Memowordlist","memo","Memoheaderlist","App","outputWords","savedwordList","inputText","useRef","useState","wordOutput","setwordOutput","outputDesc","setoutputDesc","savedWords","setsavedWords","saveButton","useCallback","push","join","getRhymes","a","fetch","current","value","results","json","data","length","syllableArray","groupBy","i","Object","keys","num","elem","words","map","item","word","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","result","Array","from","sort","key","class","id","type","placeholder","onKeyDown","event","ref","ReactDOM","render","href","target","document","getElementById"],"mappings":"6OAOeA,MAPf,SAAkBC,GAEd,OACI,+BAAKA,EAAMC,KAAX,IAAiB,wBAAQC,QAAS,kBAAMF,EAAMG,OAAOH,EAAMC,OAA1C,wBCIVG,MAPf,SAAoBJ,GAEhB,OACI,+BAAKA,EAAMC,KAAK,aAAhB,QCEFI,G,MAAeC,eAAKP,IACpBQ,EAAiBD,eAAKF,GA2GbI,MAzGf,WACE,IAAIC,EAAc,GACdC,EAAgB,GAEdC,EAAYC,iBAAO,MACzB,EAAoCC,mBAAS,qBAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAoCF,mBAAS,6BAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAoCJ,mBAAS,UAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAEMC,EAAaC,uBAAY,SAAUpB,GACvCS,EAAcY,KAAKrB,GACnBkB,EAAcT,EAAca,KAAK,SAC/B,IAZS,SAcEC,IAdF,2EAcb,wCAAAC,EAAA,6DACEV,EAAc,cADhB,SAEwBW,MAAM,0CAA0Cf,EAAUgB,QAAQC,OAF1F,cAEQC,EAFR,gBAGmBA,EAAQC,OAH3B,OAKE,GAFIC,EAHN,OAIEd,EAAc,yBAAyBN,EAAUgB,QAAQC,MAAM,KAC7C,IAAdG,EAAKC,OACPjB,EAAc,kBAEZ,CAGF,IAFIkB,EAAgBC,EAAQH,EAAM,gBAE1BI,EAAI,EAAGA,EAAGC,OAAOC,KAAKJ,GAAgBD,OAAQG,IAC9CG,EAAOF,OAAOC,KAAKJ,GAAgBE,GACnCI,EAAO,cAAChC,EAAD,CAAgBN,KAAMqC,IACnC7B,EAAYa,KAAKiB,GACbC,EAASP,EAAcK,GAAMG,KAAI,SAACC,GAAD,OAAW,cAACrC,EAAD,CAAcF,OAAQiB,EAAYnB,KAAMyC,EAAKC,UAC7FlC,EAAYa,KAAKkB,GAEnBzB,EAAcN,GAlBlB,4CAda,kEAoCb,8BAAAgB,EAAA,6DACEV,EAAc,cADhB,SAEwBW,MAAM,qCAAqCf,EAAUgB,QAAQC,OAFrF,cAEQC,EAFR,gBAGmBA,EAAQC,OAH3B,OAGMC,EAHN,OAIEd,EAAc,mCAAmCN,EAAUgB,QAAQC,MAAM,KACvD,IAAdG,EAAKC,OACPjB,EAAc,cAGdA,EAAcgB,EAAKU,KAAI,SAACC,GAAD,OAAW,cAACrC,EAAD,CAAcF,OAAQiB,EAAYnB,KAAMyC,EAAKC,WATnF,4CApCa,sBA6Db,SAAST,EAAQU,EAASC,GAGxB,GAAuB,oBAAbA,EAAyB,CAC/B,IAAMC,EAAWD,EACjBA,EAAW,SAACE,GAAD,OAASA,EAAID,IAG5B,IARkC,EAQ5BE,EAAiB,IAAIC,IARO,cASdL,GATc,IASlC,IAAI,EAAJ,qBAA6B,CAAC,IAApBM,EAAmB,QACnBC,EAAYN,EAASK,GAEvBF,EAAeI,IAAID,IACnBH,EAAeK,IAAIF,EAAW,IAElCH,EAAeM,IAAIH,GAAW7B,KAAK4B,IAfL,8BAmBlC,IAnBkC,EAmB5BK,EAAS,GAnBmB,cAoBjBC,MAAMC,KAAKT,EAAeX,QAAQqB,QApBjB,IAoBlC,IAAI,EAAJ,qBAA2D,CAAC,IAAlDC,EAAiD,QACvDJ,EAAOI,GAAOX,EAAeM,IAAIK,IArBH,8BAuBlC,OAAOJ,EAGT,OACE,gCACE,sBAAKK,MAAM,MAAX,0BAA8B,sBAAMC,GAAG,cAAT,SAAwB3C,OACtD,sBAAK0C,MAAM,kBAAX,UACE,uBAAOA,MAAM,eAAeE,KAAK,OAAOC,YAAY,eAAeF,GAAG,aAAaG,UApCzF,SAAmBC,GACA,UAAdA,EAAMN,KACLnC,KAkCyG0C,IAAKvD,IAC9G,wBAAQkD,GAAG,cAAcC,KAAK,SAASF,MAAM,kBAAkB1D,QAASsB,EAAxE,gCACA,wBAAQqC,GAAG,gBAAgBC,KAAK,SAASF,MAAM,oBAAoB1D,QA7F5D,2CA6FP,8BAEF,qBAAK0D,MAAM,MAAX,SACE,oBAAIA,MAAM,MAAMC,GAAG,qBAAnB,SAAyC7C,MAE3C,qBAAK4C,MAAM,aAAX,SACE,wBAAQC,GAAK,cAAcD,MAAM,MAAjC,SAAwC9C,UCtGhDqD,IAASC,OACP,qCAAE,mBAAGC,KAAM,yCAAyCC,OAAO,SAAzD,yBAAiF,gEAAuC,cAAC,EAAD,OAC1HC,SAASC,eAAe,W","file":"static/js/main.fbea350e.chunk.js","sourcesContent":["function WordList(props) {\n //   console.log(`Rendered ${props.text}`);\n    return(\n        <li>{props.text} <button onClick={() => props.onDone(props.text)}>(save)</button></li>\n    );\n}\n\nexport default WordList;","function HeaderList(props) {\n//   console.log(`Rendered ${props.text}`);\n    return(\n        <h2>{props.text+\" syllable:\"} </h2>\n    );\n}\n   \nexport default HeaderList;","import WordList from './WordList'\nimport HeaderList from './HeaderList'\nimport './App.css';\nimport { useState, useRef, useCallback, memo} from 'react';\n\nconst Memowordlist = memo(WordList);\nconst Memoheaderlist = memo(HeaderList);\n\nfunction App() {\n  let outputWords = [];\n  let savedwordList = [];\n\n  const inputText = useRef(null);\n  const [wordOutput, setwordOutput] = useState('(put output here)')\n  const [outputDesc, setoutputDesc] = useState('(fill in the description)')\n  const [savedWords, setsavedWords] = useState('(none)')\n\n  const saveButton = useCallback(function (text) {\n    savedwordList.push(text);\n    setsavedWords(savedwordList.join(', '));\n   }, []);\n\n  async function getRhymes(){\n    setwordOutput('...loading'); //shows \"loading\" text when items are still fetching\n    const results = await fetch(\"https://api.datamuse.com/words?rel_rhy=\"+inputText.current.value);\n    let data = await results.json();\n    setoutputDesc('Words that rhyme with '+inputText.current.value+\":\");\n    if (data.length===0) {\n      setwordOutput('No results');\n    }\n    else{\n      let syllableArray = groupBy(data, \"numSyllables\");\n    //  let outputWords= (Object.keys(syllableArray)).map((num) => (<Memorhymelist text={num} /> ));\n      for(let i = 0; i<(Object.keys(syllableArray)).length; i++) {\n        const num = (Object.keys(syllableArray))[i];\n        const elem = <Memoheaderlist text={num} />;\n        outputWords.push(elem);\n        let words = (syllableArray[num]).map((item) => (<Memowordlist onDone={saveButton} text={item.word} /> ));\n        outputWords.push(words);\n      }\n      setwordOutput(outputWords);\n    }\n  }\n\n  async function getSynonyms(){\n    setwordOutput('...loading'); //shows \"loading\" text when items are still fetching\n    const results = await fetch(\"https://api.datamuse.com/words?ml=\"+inputText.current.value);\n    let data = await results.json();\n    setoutputDesc('Words with a similar meaning to '+inputText.current.value+\":\");\n    if (data.length===0) {\n      setwordOutput('No results');\n    }\n    else{\n      setwordOutput(data.map((item) => (<Memowordlist onDone={saveButton} text={item.word} /> )));\n//        for(let i = 0; i<data.length; i++) {\n//          const item = data[i];\n//          const elem = <Memosynonymlist onDone={saveButton} text={item.word} />;\n//          outputWords.push(elem);\n//        }\n//        setwordOutput(outputWords);\n      }\n    }\n\n  function onKeydown(event) {\n    if(event.key === 'Enter') {\n        getRhymes();\n    }\n  }\n\n  function groupBy(objects, property) {\n    // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n    // value for property (obj[property])\n    if(typeof property !== 'function') {\n        const propName = property;\n        property = (obj) => obj[propName];\n    }\n\n    const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n    for(const object of objects) {\n        const groupName = property(object);\n        //Make sure that the group exists\n        if(!groupedObjects.has(groupName)) {\n            groupedObjects.set(groupName, []);\n        }\n        groupedObjects.get(groupName).push(object);\n    }\n\n    // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n    const result = {};\n    for(const key of Array.from(groupedObjects.keys()).sort()) {\n        result[key] = groupedObjects.get(key);\n    }\n    return result;\n  } \n\n  return (\n    <div>\n      <div class=\"col\">Saved words: <span id=\"saved_words\">{savedWords}</span></div>\n      <div class=\"input-group col\">\n        <input class=\"form-control\" type=\"text\" placeholder=\"Enter a word\" id=\"word_input\" onKeyDown={onKeydown} ref={inputText}/>\n        <button id=\"show_rhymes\" type=\"button\" class=\"btn btn-primary\" onClick={getRhymes} >Show rhyming words</button>\n        <button id=\"show_synonyms\" type=\"button\" class=\"btn btn-secondary\" onClick={getSynonyms} >Show synonyms</button>\n      </div>\n      <div class=\"row\">\n        <h2 class=\"col\" id=\"output_description\">{outputDesc}</h2>\n      </div>\n      <div class=\"output row\">\n        <output id = \"word_output\" class=\"col\">{wordOutput}</output>\n      </div>\n    </div> \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <><a href ='https://github.com/Brendo0515/SI579hw6' target=\"_blank\">Github repo</a><h1>Rhyme Finder (now with React!)</h1><App /></>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}